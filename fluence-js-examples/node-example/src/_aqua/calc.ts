/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.4.0-234
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v2';


// Services

export interface CalcDef {
    add: (n: number, callParams: CallParams<'n'>) => void | Promise<void>;
    divide: (n: number, callParams: CallParams<'n'>) => void | Promise<void>;
    getResult: (callParams: CallParams<null>) => number | Promise<number>;
    multiply: (n: number, callParams: CallParams<'n'>) => void | Promise<void>;
    reset: (callParams: CallParams<null>) => void | Promise<void>;
    subtract: (n: number, callParams: CallParams<'n'>) => void | Promise<void>;
}
export function registerCalc(service: CalcDef): void;
export function registerCalc(serviceId: string, service: CalcDef): void;
export function registerCalc(peer: FluencePeer, service: CalcDef): void;
export function registerCalc(peer: FluencePeer, serviceId: string, service: CalcDef): void;


export function registerCalc(...args: any) {
    registerService(
        args,
        {
            "defaultServiceId": "calc",
            "functions": [
                {
                    "functionName": "add",
                    "argDefs": [
                        {
                            "name": "n",
                            "argType": {
                                "tag": "primitive"
                            }
                        }
                    ],
                    "returnType": {
                        "tag": "void"
                    }
                },
                {
                    "functionName": "divide",
                    "argDefs": [
                        {
                            "name": "n",
                            "argType": {
                                "tag": "primitive"
                            }
                        }
                    ],
                    "returnType": {
                        "tag": "void"
                    }
                },
                {
                    "functionName": "getResult",
                    "argDefs": [
                    ],
                    "returnType": {
                        "tag": "primitive"
                    }
                },
                {
                    "functionName": "multiply",
                    "argDefs": [
                        {
                            "name": "n",
                            "argType": {
                                "tag": "primitive"
                            }
                        }
                    ],
                    "returnType": {
                        "tag": "void"
                    }
                },
                {
                    "functionName": "reset",
                    "argDefs": [
                    ],
                    "returnType": {
                        "tag": "void"
                    }
                },
                {
                    "functionName": "subtract",
                    "argDefs": [
                        {
                            "name": "n",
                            "argType": {
                                "tag": "primitive"
                            }
                        }
                    ],
                    "returnType": {
                        "tag": "void"
                    }
                }
            ]
        }
    );
}

// Functions

