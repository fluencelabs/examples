/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.1.4-136
 *
 */
import { FluenceClient, PeerIdB58 } from '@fluencelabs/fluence';
import { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';
import { RequestFlow } from '@fluencelabs/fluence/dist/internal/RequestFlow';



export async function get_price(client: FluenceClient, coin: string, currency: string, node: string, service_id: string): Promise<string> {
    let request: RequestFlow;
    const promise = new Promise<string>((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
         (call %init_peer_id% ("getDataSrv" "coin") [] coin)
        )
        (call %init_peer_id% ("getDataSrv" "currency") [] currency)
       )
       (call %init_peer_id% ("getDataSrv" "node") [] node)
      )
      (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
     )
     (call -relay- ("op" "identity") [])
    )
    (xor
     (call node (service_id "price_getter") [coin currency] price)
     (seq
      (seq
       (call -relay- ("op" "identity") [])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
      )
      (call -relay- ("op" "identity") [])
     )
    )
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [price])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId!;
                });
                h.on('getDataSrv', 'coin', () => {return coin;});
h.on('getDataSrv', 'currency', () => {return currency;});
h.on('getDataSrv', 'node', () => {return node;});
h.on('getDataSrv', 'service_id', () => {return service_id;});
                h.onEvent('callbackSrv', 'response', (args) => {
  const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for get_price');
            })
            .build();
    });
    await client.initiateFlow(request!);
    return promise;
}
      


export async function get_prices_seq(client: FluenceClient, payloads: {coin:string;currency:string}[], ns_pairs: {node:string;service_id:string}[]): Promise<string[]> {
    let request: RequestFlow;
    const promise = new Promise<string[]>((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "payloads") [] payloads)
    )
    (call %init_peer_id% ("getDataSrv" "ns_pairs") [] ns_pairs)
   )
   (fold ns_pairs p
    (seq
     (seq
      (seq
       (call -relay- ("op" "identity") [])
       (xor
        (fold payloads d
         (seq
          (call p.$.node! (p.$.service_id! "price_getter") [d.$.coin! d.$.currency!] $prices)
          (next d)
         )
        )
        (seq
         (call -relay- ("op" "identity") [])
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
        )
       )
      )
      (call -relay- ("op" "identity") [])
     )
     (next p)
    )
   )
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [$prices])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId!;
                });
                h.on('getDataSrv', 'payloads', () => {return payloads;});
h.on('getDataSrv', 'ns_pairs', () => {return ns_pairs;});
                h.onEvent('callbackSrv', 'response', (args) => {
  const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for get_prices_seq');
            })
            .build();
    });
    await client.initiateFlow(request!);
    return promise;
}
      


export async function get_prices_par(client: FluenceClient, payload: {coin:string;currency:string}[], ns_pairs: {node:string;service_id:string}[]): Promise<string[]> {
    let request: RequestFlow;
    const promise = new Promise<string[]>((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "payload") [] payload)
    )
    (call %init_peer_id% ("getDataSrv" "ns_pairs") [] ns_pairs)
   )
   (fold ns_pairs p
    (par
     (seq
      (seq
       (seq
        (call -relay- ("op" "identity") [])
        (xor
         (fold payload d
          (seq
           (call p.$.node! (p.$.service_id! "price_getter") [d.$.coin! d.$.currency!] $prices)
           (next d)
          )
         )
         (seq
          (call -relay- ("op" "identity") [])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
         )
        )
       )
       (call -relay- ("op" "identity") [])
      )
      (call %init_peer_id% ("op" "identity") [])
     )
     (next p)
    )
   )
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [$prices])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId!;
                });
                h.on('getDataSrv', 'payload', () => {return payload;});
h.on('getDataSrv', 'ns_pairs', () => {return ns_pairs;});
                h.onEvent('callbackSrv', 'response', (args) => {
  const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for get_prices_par');
            })
            .build();
    });
    await client.initiateFlow(request!);
    return promise;
}
      


export async function get_prices_par_2(client: FluenceClient, payload: {coin:string;currency:string;node:string;service_id:string}[]): Promise<string[]> {
    let request: RequestFlow;
    const promise = new Promise<string[]>((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
    (call %init_peer_id% ("getDataSrv" "payload") [] payload)
   )
   (fold payload p
    (par
     (seq
      (seq
       (seq
        (call -relay- ("op" "identity") [])
        (xor
         (call p.$.node! (p.$.service_id! "price_getter") [p.$.coin! p.$.currency!] $prices)
         (seq
          (call -relay- ("op" "identity") [])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
         )
        )
       )
       (call -relay- ("op" "identity") [])
      )
      (call %init_peer_id% ("op" "identity") [])
     )
     (next p)
    )
   )
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [$prices])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId!;
                });
                h.on('getDataSrv', 'payload', () => {return payload;});
                h.onEvent('callbackSrv', 'response', (args) => {
  const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for get_prices_par_2');
            })
            .build();
    });
    await client.initiateFlow(request!);
    return promise;
}
      