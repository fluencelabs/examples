{
  "type": "object",
  "$id": "https://fluence.dev/schemas/service.yaml",
  "title": "service.yaml",
  "description": "Defines a [Marine service](https://fluence.dev/docs/build/concepts/#services), most importantly the modules that the service consists of. You can use `fluence service new` command to generate a template for new service",
  "properties": {
    "name": {
      "type": "string",
      "description": "Service name. Currently it is used for the service name only when you add service to fluence.yaml using \"add\" command. But this name can be overridden to any other with the --name flag or manually in fluence.yaml"
    },
    "modules": {
      "title": "Modules",
      "description": "Service must have a facade module. Each module properties can be overridden by the same properties in the service config",
      "type": "object",
      "additionalProperties": {
        "type": "object",
        "title": "Module",
        "properties": {
          "get": {
            "type": "string",
            "description": "Either path to the module directory or URL to the tar.gz archive which contains the content of the module directory"
          },
          "maxHeapSize": {
            "type": "string",
            "nullable": true,
            "description": "Max size of the heap that a module can allocate in format: [number][whitespace?][specificator?] where ? is an optional field and specificator is one from the following (case-insensitive):\nK, Kb - kilobyte\nKi, KiB - kibibyte\nM, Mb - megabyte\nMi, MiB - mebibyte\nG, Gb - gigabyte\nGi, GiB - gibibyte\nCurrent limit is 4 GiB"
          },
          "loggerEnabled": {
            "type": "boolean",
            "nullable": true,
            "description": "Set true to allow module to use the Marine SDK logger"
          },
          "loggingMask": {
            "type": "number",
            "nullable": true,
            "description": "manages the logging targets, described in detail: https://fluence.dev/docs/marine-book/marine-rust-sdk/developing/logging#using-target-map"
          },
          "volumes": {
            "type": "object",
            "nullable": true,
            "required": [],
            "title": "Volumes",
            "additionalProperties": {
              "type": "string"
            },
            "properties": {
              "Alias": {
                "type": "string",
                "description": "path"
              }
            },
            "description": "A map of accessible files and their aliases. Aliases should be used in Marine module development because it's hard to know the full path to a file"
          },
          "envs": {
            "type": "object",
            "title": "Environment variables",
            "nullable": true,
            "required": [],
            "additionalProperties": {
              "type": "string"
            },
            "properties": {
              "Environment_variable_name": {
                "type": "string",
                "description": "Environment variable value"
              }
            },
            "description": "environment variables accessible by a particular module with standard Rust env API like this: std::env::var(IPFS_ADDR_ENV_NAME). Please note that Marine adds three additional environment variables. Module environment variables could be examined with repl"
          },
          "mountedBinaries": {
            "title": "Mounted binaries",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "properties": {
              "Mounted_binary_name": {
                "type": "string",
                "description": "Path to a mounted binary"
              }
            },
            "nullable": true,
            "required": [],
            "description": "A map of binary executable files that module is allowed to call. Example: curl: /usr/bin/curl"
          }
        },
        "required": [
          "get"
        ]
      },
      "properties": {
        "facade": {
          "type": "object",
          "title": "Module",
          "properties": {
            "get": {
              "type": "string",
              "description": "Either path to the module directory or URL to the tar.gz archive which contains the content of the module directory"
            },
            "maxHeapSize": {
              "type": "string",
              "nullable": true,
              "description": "Max size of the heap that a module can allocate in format: [number][whitespace?][specificator?] where ? is an optional field and specificator is one from the following (case-insensitive):\nK, Kb - kilobyte\nKi, KiB - kibibyte\nM, Mb - megabyte\nMi, MiB - mebibyte\nG, Gb - gigabyte\nGi, GiB - gibibyte\nCurrent limit is 4 GiB"
            },
            "loggerEnabled": {
              "type": "boolean",
              "nullable": true,
              "description": "Set true to allow module to use the Marine SDK logger"
            },
            "loggingMask": {
              "type": "number",
              "nullable": true,
              "description": "manages the logging targets, described in detail: https://fluence.dev/docs/marine-book/marine-rust-sdk/developing/logging#using-target-map"
            },
            "volumes": {
              "type": "object",
              "nullable": true,
              "required": [],
              "title": "Volumes",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {
                "Alias": {
                  "type": "string",
                  "description": "path"
                }
              },
              "description": "A map of accessible files and their aliases. Aliases should be used in Marine module development because it's hard to know the full path to a file"
            },
            "envs": {
              "type": "object",
              "title": "Environment variables",
              "nullable": true,
              "required": [],
              "additionalProperties": {
                "type": "string"
              },
              "properties": {
                "Environment_variable_name": {
                  "type": "string",
                  "description": "Environment variable value"
                }
              },
              "description": "environment variables accessible by a particular module with standard Rust env API like this: std::env::var(IPFS_ADDR_ENV_NAME). Please note that Marine adds three additional environment variables. Module environment variables could be examined with repl"
            },
            "mountedBinaries": {
              "title": "Mounted binaries",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {
                "Mounted_binary_name": {
                  "type": "string",
                  "description": "Path to a mounted binary"
                }
              },
              "nullable": true,
              "required": [],
              "description": "A map of binary executable files that module is allowed to call. Example: curl: /usr/bin/curl"
            }
          },
          "required": [
            "get"
          ]
        },
        "Other_module_name": {
          "type": "object",
          "title": "Module",
          "properties": {
            "get": {
              "type": "string",
              "description": "Either path to the module directory or URL to the tar.gz archive which contains the content of the module directory"
            },
            "maxHeapSize": {
              "type": "string",
              "nullable": true,
              "description": "Max size of the heap that a module can allocate in format: [number][whitespace?][specificator?] where ? is an optional field and specificator is one from the following (case-insensitive):\nK, Kb - kilobyte\nKi, KiB - kibibyte\nM, Mb - megabyte\nMi, MiB - mebibyte\nG, Gb - gigabyte\nGi, GiB - gibibyte\nCurrent limit is 4 GiB"
            },
            "loggerEnabled": {
              "type": "boolean",
              "nullable": true,
              "description": "Set true to allow module to use the Marine SDK logger"
            },
            "loggingMask": {
              "type": "number",
              "nullable": true,
              "description": "manages the logging targets, described in detail: https://fluence.dev/docs/marine-book/marine-rust-sdk/developing/logging#using-target-map"
            },
            "volumes": {
              "type": "object",
              "nullable": true,
              "required": [],
              "title": "Volumes",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {
                "Alias": {
                  "type": "string",
                  "description": "path"
                }
              },
              "description": "A map of accessible files and their aliases. Aliases should be used in Marine module development because it's hard to know the full path to a file"
            },
            "envs": {
              "type": "object",
              "title": "Environment variables",
              "nullable": true,
              "required": [],
              "additionalProperties": {
                "type": "string"
              },
              "properties": {
                "Environment_variable_name": {
                  "type": "string",
                  "description": "Environment variable value"
                }
              },
              "description": "environment variables accessible by a particular module with standard Rust env API like this: std::env::var(IPFS_ADDR_ENV_NAME). Please note that Marine adds three additional environment variables. Module environment variables could be examined with repl"
            },
            "mountedBinaries": {
              "title": "Mounted binaries",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "properties": {
                "Mounted_binary_name": {
                  "type": "string",
                  "description": "Path to a mounted binary"
                }
              },
              "nullable": true,
              "required": [],
              "description": "A map of binary executable files that module is allowed to call. Example: curl: /usr/bin/curl"
            }
          },
          "required": [
            "get"
          ]
        }
      },
      "required": [
        "facade"
      ]
    },
    "version": {
      "type": "number",
      "const": 0
    }
  },
  "required": [
    "version",
    "name",
    "modules"
  ]
}
