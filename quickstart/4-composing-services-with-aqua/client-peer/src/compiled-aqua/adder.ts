/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-226
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    ResultCodes,
    RequestFlow,
    RequestFlowBuilder,
    CallParams,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v1';


// Services

 export interface AddOneDef {
     add_one: (arg0: number, callParams: CallParams<'arg0'>) => number;
 }

 export function registerAddOne(serviceId: string, service: AddOneDef): void;
export function registerAddOne(peer: FluencePeer, serviceId: string, service: AddOneDef): void;
 export function registerAddOne(...args: any) {
    let peer: FluencePeer;
    let serviceId: any;
    let service: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
    } else {
        peer = Fluence.getPeer();
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    } 

    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use((req, resp, next) => {
          if (req.serviceId !== serviceId) {
              next();
              return;
          }
  
          
 if (req.fnName === 'add_one') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         arg0: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 resp.result = service.add_one(req.args[0], callParams)

 }
    
  
          next();
      });
 }
      


 export interface MyOpDef {
     identity: (u: number, callParams: CallParams<'u'>) => void;
 }

 export function registerMyOp(service: MyOpDef): void;
export function registerMyOp(serviceId: string, service: MyOpDef): void;
export function registerMyOp(peer: FluencePeer, service: MyOpDef): void;
export function registerMyOp(peer: FluencePeer, serviceId: string, service: MyOpDef): void;
 export function registerMyOp(...args: any) {
    let peer: FluencePeer;
    let serviceId: any;
    let service: any;
    if (FluencePeer.isInstance(args[0])) {
        peer = args[0];
    } else {
        peer = Fluence.getPeer();
    }

    if (typeof args[0] === 'string') {
        serviceId = args[0];
    } else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }  
 else {
     serviceId = "op"
}

    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    } else if (typeof args[1] === 'object') {
        service = args[1];
    } else {
        service = args[2];
    }

      peer.internals.callServiceHandler.use((req, resp, next) => {
          if (req.serviceId !== serviceId) {
              next();
              return;
          }
  
          
 if (req.fnName === 'identity') {
     
 const callParams = {
     ...req.particleContext,
     tetraplets: {
         u: req.tetraplets[0]
     },
 };
 resp.retCode = ResultCodes.success;
 service.identity(req.args[0], callParams); resp.result = {}

 }
    
  
          next();
      });
 }
      

// Functions

 export function add_one(value: number, node: string, service_id: string, config?: {ttl?: number}) : Promise<number>;
 export function add_one(peer: FluencePeer, value: number, node: string, service_id: string, config?: {ttl?: number}) : Promise<number>;
 export function add_one(...args: any) {
     let peer: FluencePeer;
     let value: any;
let node: any;
let service_id: any;
     let config: any;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         value = args[1];
node = args[2];
service_id = args[3];
config = args[4];
     } else {
         peer = Fluence.getPeer();
         value = args[0];
node = args[1];
service_id = args[2];
config = args[3];
     }
    
     let request: RequestFlow;
     const promise = new Promise<number>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
        (call %init_peer_id% ("getDataSrv" "value") [] value)
       )
       (call %init_peer_id% ("getDataSrv" "node") [] node)
      )
      (call %init_peer_id% ("getDataSrv" "service_id") [] service_id)
     )
     (call -relay- ("op" "noop") [])
    )
    (xor
     (seq
      (call -relay- ("op" "noop") [])
      (call node (service_id "add_one") [value] res)
     )
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                h.on('getDataSrv', 'value', () => {return value;});
h.on('getDataSrv', 'node', () => {return node;});
h.on('getDataSrv', 'service_id', () => {return service_id;});
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for add_one');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}
      


 export function add_one_three_times(value: number, ns_tuples: {node_id:string;service_id:string}[], config?: {ttl?: number}) : Promise<number>;
 export function add_one_three_times(peer: FluencePeer, value: number, ns_tuples: {node_id:string;service_id:string}[], config?: {ttl?: number}) : Promise<number>;
 export function add_one_three_times(...args: any) {
     let peer: FluencePeer;
     let value: any;
let ns_tuples: any;
     let config: any;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         value = args[1];
ns_tuples = args[2];
config = args[3];
     } else {
         peer = Fluence.getPeer();
         value = args[0];
ns_tuples = args[1];
config = args[2];
     }
    
     let request: RequestFlow;
     const promise = new Promise<number>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
         (call %init_peer_id% ("getDataSrv" "value") [] value)
        )
        (call %init_peer_id% ("getDataSrv" "ns_tuples") [] ns_tuples)
       )
       (call -relay- ("op" "noop") [])
      )
      (xor
       (seq
        (call -relay- ("op" "noop") [])
        (call ns_tuples.$.[0].node_id! (ns_tuples.$.[0].service_id! "add_one") [value] res1)
       )
       (seq
        (seq
         (call -relay- ("op" "noop") [])
         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
        )
        (call -relay- ("op" "noop") [])
       )
      )
     )
     (xor
      (call ns_tuples.$.[1].node_id! (ns_tuples.$.[1].service_id! "add_one") [res1] res2)
      (seq
       (seq
        (call -relay- ("op" "noop") [])
        (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
       )
       (call -relay- ("op" "noop") [])
      )
     )
    )
    (xor
     (call ns_tuples.$.[2].node_id! (ns_tuples.$.[2].service_id! "add_one") [res2] res3)
     (seq
      (call -relay- ("op" "noop") [])
      (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
     )
    )
   )
   (call -relay- ("op" "noop") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res3])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 5])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                h.on('getDataSrv', 'value', () => {return value;});
h.on('getDataSrv', 'ns_tuples', () => {return ns_tuples;});
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for add_one_three_times');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}
      


 export function add_one_par(value: number, ns_tuples: {node_id:string;service_id:string}[], config?: {ttl?: number}) : Promise<number[]>;
 export function add_one_par(peer: FluencePeer, value: number, ns_tuples: {node_id:string;service_id:string}[], config?: {ttl?: number}) : Promise<number[]>;
 export function add_one_par(...args: any) {
     let peer: FluencePeer;
     let value: any;
let ns_tuples: any;
     let config: any;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         value = args[1];
ns_tuples = args[2];
config = args[3];
     } else {
         peer = Fluence.getPeer();
         value = args[0];
ns_tuples = args[1];
config = args[2];
     }
    
     let request: RequestFlow;
     const promise = new Promise<number[]>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
      (call %init_peer_id% ("getDataSrv" "value") [] value)
     )
     (call %init_peer_id% ("getDataSrv" "ns_tuples") [] ns_tuples)
    )
    (fold ns_tuples ns
     (par
      (seq
       (seq
        (seq
         (call -relay- ("op" "noop") [])
         (xor
          (seq
           (call -relay- ("op" "noop") [])
           (call ns.$.node_id! (ns.$.service_id! "add_one") [value] $res)
          )
          (seq
           (call -relay- ("op" "noop") [])
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
          )
         )
        )
        (call -relay- ("op" "noop") [])
       )
       (call %init_peer_id% ("op" "noop") [])
      )
      (next ns)
     )
    )
   )
   (call %init_peer_id% ("op" "identity") [$res.$.[2]!])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [$res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                h.on('getDataSrv', 'value', () => {return value;});
h.on('getDataSrv', 'ns_tuples', () => {return ns_tuples;});
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for add_one_par');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}
      


 export function add_one_par_alt(payload: {node_id:string;service_id:string;value:number}[], config?: {ttl?: number}) : Promise<number[]>;
 export function add_one_par_alt(peer: FluencePeer, payload: {node_id:string;service_id:string;value:number}[], config?: {ttl?: number}) : Promise<number[]>;
 export function add_one_par_alt(...args: any) {
     let peer: FluencePeer;
     let payload: any;
     let config: any;
     if (FluencePeer.isInstance(args[0])) {
         peer = args[0];
         payload = args[1];
config = args[2];
     } else {
         peer = Fluence.getPeer();
         payload = args[0];
config = args[1];
     }
    
     let request: RequestFlow;
     const promise = new Promise<number[]>((resolve, reject) => {
         const r = new RequestFlowBuilder()
                 .disableInjections()
                 .withRawScript(
                     `
     (xor
 (seq
  (seq
   (seq
    (seq
     (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
     (call %init_peer_id% ("getDataSrv" "payload") [] payload)
    )
    (fold payload vns
     (par
      (seq
       (seq
        (seq
         (call -relay- ("op" "noop") [])
         (xor
          (seq
           (call -relay- ("op" "noop") [])
           (call vns.$.node_id! (vns.$.service_id! "add_one") [vns.$.value!] $res)
          )
          (seq
           (call -relay- ("op" "noop") [])
           (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
          )
         )
        )
        (call -relay- ("op" "noop") [])
       )
       (call %init_peer_id% ("op" "noop") [])
      )
      (next vns)
     )
    )
   )
   (call %init_peer_id% ("op" "identity") [$res.$.[2]!])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [$res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
)

                 `,
                 )
                 .configHandler((h) => {
                     h.on('getDataSrv', '-relay-', () => {
                    return peer.getStatus().relayPeerId;
                });
                h.on('getDataSrv', 'payload', () => {return payload;});
                h.onEvent('callbackSrv', 'response', (args) => {
    const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for add_one_par_alt');
            })
        if(config && config.ttl) {
            r.withTTL(config.ttl)
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request!);
    return promise;
}
      
