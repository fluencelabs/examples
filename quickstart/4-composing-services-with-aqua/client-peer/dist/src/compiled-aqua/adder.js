"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.add_one_par_alt = exports.add_one_par = exports.add_one_three_times = exports.add_one = exports.registerMyOp = exports.registerAddOne = void 0;
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.3.0-226
 *
 */
var fluence_1 = require("@fluencelabs/fluence");
var v1_1 = require("@fluencelabs/fluence/dist/internal/compilerSupport/v1");
function registerAddOne() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var serviceId;
    var service;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
    }
    if (typeof args[0] === 'string') {
        serviceId = args[0];
    }
    else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(fluence_1.FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    }
    else if (typeof args[1] === 'object') {
        service = args[1];
    }
    else {
        service = args[2];
    }
    peer.internals.callServiceHandler.use(function (req, resp, next) {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }
        if (req.fnName === 'add_one') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    arg0: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            resp.result = service.add_one(req.args[0], callParams);
        }
        next();
    });
}
exports.registerAddOne = registerAddOne;
function registerMyOp() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var serviceId;
    var service;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
    }
    if (typeof args[0] === 'string') {
        serviceId = args[0];
    }
    else if (typeof args[1] === 'string') {
        serviceId = args[1];
    }
    else {
        serviceId = "op";
    }
    // Figuring out which overload is the service.
    // If the first argument is not Fluence Peer and it is an object, then it can only be the service def
    // If the first argument is peer, we are checking further. The second argument might either be
    // an object, that it must be the service object
    // or a string, which is the service id. In that case the service is the third argument
    if (!(fluence_1.FluencePeer.isInstance(args[0])) && typeof args[0] === 'object') {
        service = args[0];
    }
    else if (typeof args[1] === 'object') {
        service = args[1];
    }
    else {
        service = args[2];
    }
    peer.internals.callServiceHandler.use(function (req, resp, next) {
        if (req.serviceId !== serviceId) {
            next();
            return;
        }
        if (req.fnName === 'identity') {
            var callParams = __assign(__assign({}, req.particleContext), { tetraplets: {
                    u: req.tetraplets[0]
                } });
            resp.retCode = v1_1.ResultCodes.success;
            service.identity(req.args[0], callParams);
            resp.result = {};
        }
        next();
    });
}
exports.registerMyOp = registerMyOp;
function add_one() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var value;
    var node;
    var service_id;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        value = args[1];
        node = args[2];
        service_id = args[3];
        config = args[4];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        value = args[0];
        node = args[1];
        service_id = args[2];
        config = args[3];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n        (call %init_peer_id% (\"getDataSrv\" \"value\") [] value)\n       )\n       (call %init_peer_id% (\"getDataSrv\" \"node\") [] node)\n      )\n      (call %init_peer_id% (\"getDataSrv\" \"service_id\") [] service_id)\n     )\n     (call -relay- (\"op\" \"noop\") [])\n    )\n    (xor\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call node (service_id \"add_one\") [value] res)\n     )\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [res])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'value', function () { return value; });
            h.on('getDataSrv', 'node', function () { return node; });
            h.on('getDataSrv', 'service_id', function () { return service_id; });
            h.onEvent('callbackSrv', 'response', function (args) {
                var res = args[0];
                resolve(res);
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for add_one');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
exports.add_one = add_one;
function add_one_three_times() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var value;
    var ns_tuples;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        value = args[1];
        ns_tuples = args[2];
        config = args[3];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        value = args[0];
        ns_tuples = args[1];
        config = args[2];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (seq\n      (seq\n       (seq\n        (seq\n         (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n         (call %init_peer_id% (\"getDataSrv\" \"value\") [] value)\n        )\n        (call %init_peer_id% (\"getDataSrv\" \"ns_tuples\") [] ns_tuples)\n       )\n       (call -relay- (\"op\" \"noop\") [])\n      )\n      (xor\n       (seq\n        (call -relay- (\"op\" \"noop\") [])\n        (call ns_tuples.$.[0].node_id! (ns_tuples.$.[0].service_id! \"add_one\") [value] res1)\n       )\n       (seq\n        (seq\n         (call -relay- (\"op\" \"noop\") [])\n         (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n        )\n        (call -relay- (\"op\" \"noop\") [])\n       )\n      )\n     )\n     (xor\n      (call ns_tuples.$.[1].node_id! (ns_tuples.$.[1].service_id! \"add_one\") [res1] res2)\n      (seq\n       (seq\n        (call -relay- (\"op\" \"noop\") [])\n        (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n       )\n       (call -relay- (\"op\" \"noop\") [])\n      )\n     )\n    )\n    (xor\n     (call ns_tuples.$.[2].node_id! (ns_tuples.$.[2].service_id! \"add_one\") [res2] res3)\n     (seq\n      (call -relay- (\"op\" \"noop\") [])\n      (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n     )\n    )\n   )\n   (call -relay- (\"op\" \"noop\") [])\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [res3])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 4])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 5])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'value', function () { return value; });
            h.on('getDataSrv', 'ns_tuples', function () { return ns_tuples; });
            h.onEvent('callbackSrv', 'response', function (args) {
                var res = args[0];
                resolve(res);
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for add_one_three_times');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
exports.add_one_three_times = add_one_three_times;
function add_one_par() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var value;
    var ns_tuples;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        value = args[1];
        ns_tuples = args[2];
        config = args[3];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        value = args[0];
        ns_tuples = args[1];
        config = args[2];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (seq\n     (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n     (call %init_peer_id% (\"getDataSrv\" \"value\") [] value)\n    )\n    (call %init_peer_id% (\"getDataSrv\" \"ns_tuples\") [] ns_tuples)\n   )\n   (fold ns_tuples ns\n    (par\n     (seq\n      (seq\n       (seq\n        (seq\n         (call -relay- (\"op\" \"noop\") [])\n         (xor\n          (seq\n           (call -relay- (\"op\" \"noop\") [])\n           (call ns.$.node_id! (ns.$.service_id! \"add_one\") [value] $res)\n          )\n          (seq\n           (call -relay- (\"op\" \"noop\") [])\n           (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n          )\n         )\n        )\n        (call -relay- (\"op\" \"noop\") [])\n       )\n       (call %init_peer_id% (\"op\" \"identity\") [$res.$.[2]!])\n      )\n      (call %init_peer_id% (\"op\" \"noop\") [])\n     )\n     (next ns)\n    )\n   )\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [$res])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'value', function () { return value; });
            h.on('getDataSrv', 'ns_tuples', function () { return ns_tuples; });
            h.onEvent('callbackSrv', 'response', function (args) {
                var res = args[0];
                resolve(res);
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for add_one_par');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
exports.add_one_par = add_one_par;
function add_one_par_alt() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    var peer;
    var payload;
    var config;
    if (fluence_1.FluencePeer.isInstance(args[0])) {
        peer = args[0];
        payload = args[1];
        config = args[2];
    }
    else {
        peer = fluence_1.Fluence.getPeer();
        payload = args[0];
        config = args[1];
    }
    var request;
    var promise = new Promise(function (resolve, reject) {
        var r = new v1_1.RequestFlowBuilder()
            .disableInjections()
            .withRawScript("\n     (xor\n (seq\n  (seq\n   (seq\n    (call %init_peer_id% (\"getDataSrv\" \"-relay-\") [] -relay-)\n    (call %init_peer_id% (\"getDataSrv\" \"payload\") [] payload)\n   )\n   (fold payload vns\n    (par\n     (seq\n      (seq\n       (seq\n        (seq\n         (call -relay- (\"op\" \"noop\") [])\n         (xor\n          (seq\n           (call -relay- (\"op\" \"noop\") [])\n           (call vns.$.node_id! (vns.$.service_id! \"add_one\") [vns.$.value!] $res)\n          )\n          (seq\n           (call -relay- (\"op\" \"noop\") [])\n           (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 1])\n          )\n         )\n        )\n        (call -relay- (\"op\" \"noop\") [])\n       )\n       (call %init_peer_id% (\"op\" \"identity\") [$res.$.[2]!])\n      )\n      (call %init_peer_id% (\"op\" \"noop\") [])\n     )\n     (next vns)\n    )\n   )\n  )\n  (xor\n   (call %init_peer_id% (\"callbackSrv\" \"response\") [$res])\n   (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 2])\n  )\n )\n (call %init_peer_id% (\"errorHandlingSrv\" \"error\") [%last_error% 3])\n)\n\n                 ")
            .configHandler(function (h) {
            h.on('getDataSrv', '-relay-', function () {
                return peer.getStatus().relayPeerId;
            });
            h.on('getDataSrv', 'payload', function () { return payload; });
            h.onEvent('callbackSrv', 'response', function (args) {
                var res = args[0];
                resolve(res);
            });
            h.onEvent('errorHandlingSrv', 'error', function (args) {
                var err = args[0];
                reject(err);
            });
        })
            .handleScriptError(reject)
            .handleTimeout(function () {
            reject('Request timed out for add_one_par_alt');
        });
        if (config && config.ttl) {
            r.withTTL(config.ttl);
        }
        request = r.build();
    });
    peer.internals.initiateFlow(request);
    return promise;
}
exports.add_one_par_alt = add_one_par_alt;
