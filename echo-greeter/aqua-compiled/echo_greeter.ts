/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/. 
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.1.6-146
 *
 */
import { FluenceClient, PeerIdB58 } from '@fluencelabs/fluence';
import { RequestFlowBuilder } from '@fluencelabs/fluence/dist/api.unstable';
import { RequestFlow } from '@fluencelabs/fluence/dist/internal/RequestFlow';



export async function echo(client: FluenceClient, names: string[], node: string, echo_service: string, config?: {ttl?: number}): Promise<{echo:string}[]> {
    let request: RequestFlow;
    const promise = new Promise<{echo:string}[]>((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withTTL(config?.ttl || 5000)
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
        (call %init_peer_id% ("getDataSrv" "names") [] names)
       )
       (call %init_peer_id% ("getDataSrv" "node") [] node)
      )
      (call %init_peer_id% ("getDataSrv" "echo_service") [] echo_service)
     )
     (call -relay- ("op" "identity") [])
    )
    (xor
     (call node (echo_service "echo") [names] res)
     (seq
      (seq
       (call -relay- ("op" "identity") [])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
      )
      (call -relay- ("op" "identity") [])
     )
    )
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId!;
                });
                h.on('getDataSrv', 'names', () => {return names;});
h.on('getDataSrv', 'node', () => {return node;});
h.on('getDataSrv', 'echo_service', () => {return echo_service;});
                h.onEvent('callbackSrv', 'response', (args) => {
  const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for echo');
            })
            .build();
    });
    await client.initiateFlow(request!);
    return promise;
}
      


export async function echo_greeting_seq(client: FluenceClient, names: string[], greet: boolean, node: string, echo_service_id: string, greeting_service_id: string, config?: {ttl?: number}): Promise<string[]> {
    let request: RequestFlow;
    const promise = new Promise<string[]>((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withTTL(config?.ttl || 5000)
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (seq
          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
          (call %init_peer_id% ("getDataSrv" "names") [] names)
         )
         (call %init_peer_id% ("getDataSrv" "greet") [] greet)
        )
        (call %init_peer_id% ("getDataSrv" "node") [] node)
       )
       (call %init_peer_id% ("getDataSrv" "echo_service_id") [] echo_service_id)
      )
      (call %init_peer_id% ("getDataSrv" "greeting_service_id") [] greeting_service_id)
     )
     (call -relay- ("op" "identity") [])
    )
    (xor
     (seq
      (call node (echo_service_id "echo") [names] echo_names)
      (fold echo_names result
       (seq
        (call node ("service-id" "greeting") [result.$.echo! greet] $res)
        (next result)
       )
      )
     )
     (seq
      (seq
       (call -relay- ("op" "identity") [])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
      )
      (call -relay- ("op" "identity") [])
     )
    )
   )
   (call -relay- ("op" "identity") [])
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [$res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId!;
                });
                h.on('getDataSrv', 'names', () => {return names;});
h.on('getDataSrv', 'greet', () => {return greet;});
h.on('getDataSrv', 'node', () => {return node;});
h.on('getDataSrv', 'echo_service_id', () => {return echo_service_id;});
h.on('getDataSrv', 'greeting_service_id', () => {return greeting_service_id;});
                h.onEvent('callbackSrv', 'response', (args) => {
  const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for echo_greeting_seq');
            })
            .build();
    });
    await client.initiateFlow(request!);
    return promise;
}
      


export async function echo_greeting_par(client: FluenceClient, names: string[], greet: boolean, echo_service: {names:string[];node:string;service_id:string}, greeting_services: {node:string;service_id:string}[], config?: {ttl?: number}): Promise<string[]> {
    let request: RequestFlow;
    const promise = new Promise<string[]>((resolve, reject) => {
        request = new RequestFlowBuilder()
            .disableInjections()
            .withTTL(config?.ttl || 5000)
            .withRawScript(
                `
(xor
 (seq
  (seq
   (seq
    (seq
     (seq
      (seq
       (seq
        (seq
         (seq
          (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
          (call %init_peer_id% ("getDataSrv" "names") [] names)
         )
         (call %init_peer_id% ("getDataSrv" "greet") [] greet)
        )
        (call %init_peer_id% ("getDataSrv" "echo_service") [] echo_service)
       )
       (call %init_peer_id% ("getDataSrv" "greeting_services") [] greeting_services)
      )
      (call -relay- ("op" "identity") [])
     )
     (xor
      (call echo_service.$.node! (echo_service.$.service_id! "echo") [names] echo_results)
      (seq
       (call -relay- ("op" "identity") [])
       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
      )
     )
    )
    (call -relay- ("op" "identity") [])
   )
   (fold echo_results result
    (par
     (fold greeting_services greeting_service
      (par
       (seq
        (call -relay- ("op" "identity") [])
        (xor
         (seq
          (call greeting_service.$.node! (greeting_service.$.service_id! "greeting") [result.$.echo! greet] $res)
          (call greeting_service.$.node! ("op" "identity") [$res.$.[19]!])
         )
         (seq
          (call -relay- ("op" "identity") [])
          (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
         )
        )
       )
       (seq
        (call -relay- ("op" "identity") [])
        (next greeting_service)
       )
      )
     )
     (next result)
    )
   )
  )
  (xor
   (call %init_peer_id% ("callbackSrv" "response") [$res])
   (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
  )
 )
 (seq
  (call -relay- ("op" "identity") [])
  (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 4])
 )
)

            `,
            )
            .configHandler((h) => {
                h.on('getDataSrv', '-relay-', () => {
                    return client.relayPeerId!;
                });
                h.on('getDataSrv', 'names', () => {return names;});
h.on('getDataSrv', 'greet', () => {return greet;});
h.on('getDataSrv', 'echo_service', () => {return echo_service;});
h.on('getDataSrv', 'greeting_services', () => {return greeting_services;});
                h.onEvent('callbackSrv', 'response', (args) => {
  const [res] = args;
  resolve(res);
});

                h.onEvent('errorHandlingSrv', 'error', (args) => {
                    // assuming error is the single argument
                    const [err] = args;
                    reject(err);
                });
            })
            .handleScriptError(reject)
            .handleTimeout(() => {
                reject('Request timed out for echo_greeting_par');
            })
            .build();
    });
    await client.initiateFlow(request!);
    return promise;
}
      