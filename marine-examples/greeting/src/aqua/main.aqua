aqua Main

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/registry/subnetwork.aqua"
import Registry, Record from "@fluencelabs/registry/registry-service.aqua"
import "@fluencelabs/spell/spell_service.aqua"

import "workers.aqua"
import "services.aqua"

export greeting, greetings_seq, greetings_par
export console_tester

service ConsoleAny("run-console"):
    print(any: âŠ¤)

service ConsoleAny2("run-console"):
    print(msg: []?string)

service Console("run-console"):
    print(msg: string)

func console_tester() -> string:
    Console.print("tester start")
    on HOST_PEER_ID:
        workersInfo <- getWorkersInfo()
        dealId = workersInfo.deals.defaultWorker.dealId
        workersOp, err <- resolveSubnetwork(dealId)
    ConsoleAny.print(err)
    ConsoleAny.print(workersOp!)
    -- ConsoleAny.print(workersOp)
    Console.print("tester end")
    <- "the end of tester"


func getWorkers() -> []Record:
  workersInfo <- getWorkersInfo()
  dealId = workersInfo.deals.defaultWorker.dealId
  workersOp, err <- resolveSubnetwork(dealId)
  ConsoleAny.print([err])
  ConsoleAny2.print([err])
  <- workersOp!

func greeting(arg: string) -> string:
  on HOST_PEER_ID:
      workers  <- getWorkers()
      worker = workers[0]
      on worker.metadata.peer_id via worker.metadata.relay_id:
        res <- Service.greeting(arg)
  <- res

func greetings_seq(arg: string) -> [][]string:
    result: *[]string
    on HOST_PEER_ID:
        workers  <- getWorkers()
        for worker <- workers:
            res: *string
            on worker.metadata.peer_id via worker.metadata.relay_id:
                res <- Service.greeting(arg)
                res <<- worker.metadata.peer_id
                res <<- worker.metadata.relay_id!
                result <<- res
    <- result

func greetings_par(arg: string) -> [][]string:
    result: *[]string
    on HOST_PEER_ID:
        workers  <- getWorkers()
        for worker <- workers par:
            res: *string
            on worker.metadata.peer_id via worker.metadata.relay_id:
                res <- Service.greeting(arg)
                res <<- worker.metadata.peer_id
                res <<- worker.metadata.relay_id!
                result <<- res
        -- par Peer.timeout(100000, "timeout")
        join result[workers.length -1]
        par Peer.timeout(100000, "timeout")
    <- result
